function data = elscr(data, method)
% Identify Skin Conductance Responses (SCRs) from GSR data and mark which are event-related and to what event.
%
% The input "data" is a structure generated by running an Edulogger experiment,
% consisting of the following fields:
% Time: The time (s) since the start of the experiment of each sample.
% (double)
% Concern: Whether or not each sample took more than twice the specified
% sample rate to retrieve (logical)
% GSR: Raw electrodermal data from a GSR edulogger (double)
% An additional field for each kind of Edulogger used, containing the
% measurements taken at each point in data.Time.
% An additiona field for Tonic and Phasic signals if the GSR data has
% already been split.
% 
% The output "data" is the same structure which was inputted, with two
% fields added: 
% SCR: Indicating whether or not a valid SCR took place at the given
% timestamp (logical)
% EventRelated: Containing the field names of any events to which a given
% SCR corresponds (cell)

if isfield(data, 'GSR') % Throw an error if data supplied is not GSR
    if ~(isfield(data, 'Tonic') && isfield(data, 'Phasic')) % If data was not already split...
        data = elgsrsplit(data); % Split it
    end
        
    switch class(method) % Check whether supplied a function handle or string for method...
        case 'function_handle' % If it's a function handle...
            peaks = abs([data.Phasic]) > method([data.Phasic]); % Execute the function to get a threshold to identify peaks by
        case {'char' 'string'} % If it's a string...
            try
                peaks = isoutlier([data.Phasic], method); % Use standard Matlab outlier function with specified method
            catch
                error('Outlier analysis failed, method is invalid');
            end
        otherwise % If type is invalid...
            error('method must be either a function handle, string or a character array'); % Deliver an error
    end
    
    for n = 1:length(data) % For each data point...
        data(n).SCR = peaks(n); % Add logical array showing peaks as new field
    end
    
    % Mark event-related SCRs
    er = cell(1, length(data)); % Create blank cell array to store event relatedness in
    for peak = [data([data.SCR]).Time] % For each peak...
        seg = data([data.Time] > peak-3 & [data.Time] < peak-1); % Get all data within acceptable interval (1s to 3s)
        for f = fieldnames(seg)' % For each field...
            if islogical([seg.(f{:})]) && ~strcmp(f{:}, 'SCR')  % If the field is logical & isn't the SCR field...
                if sum([seg.(f{:})]) > 0 % If there are any events in this timeframe...
                    er{[data.Time] == peak} = [er{[data.Time] == peak} f]; % Store the field name as a string in the event relatedness variable
                end
            end
        end
    end
     for n = 1:length(data) % For each data point...
         data(n).EventRelated = er{n}; % Store event relatedness string
     end
    
else
    error('Data must have a column of GSR data');
end
    