function fig = elplot(data, varargin)
% Create a plot from Edulog data
%
% "data" is a structure generated by running an Edulogger experiment,
% consisting of the following fields:
% Time: The time (s) since the start of the experiment of each sample.
% (double)
% Concern: Whether or not each sample took more than twice the specified
% sample rate to retrieve (logical)
% An additional field for each kind of Edulogger used, containing the
% measurements taken at each point in data.Time. Fieldnames should line up 
% with the names specified in "loggers".
% "loggers" is a one dimensional cell array, with each string specifying
% the name of a different Edulogger as described in the Neulog API 
% literature:
% https://neulog.com/wp-content/uploads/2014/06/NeuLog-API-version-7.pdf
%
% "fig" is a Graphics Object containing the graph generated, properties of
% the graph can be changed by editing this object.

load('eltypes.mat', 'eltypes'); % Load possible Edulogger types from file
loggers = varargin(contains(varargin, eltypes)); % Extract variable inputs matching valid types
if isempty(loggers) % If no valid loggers supplied...
    error('No valid Eduloggers selected'); % Throw up an error
end
evtype = varargin(~contains(varargin, eltypes)); % Take any additional input as event types

sDim = get(0,'screensize'); % Get screensize

% Create & setup a blank figure
fig = figure(... % Create figure
    'Name', 'Edulog Data', ... % Name figure
    'NumberTitle', 'off', ... % Remove "Figure 1" label
    'Color', 'white', ... % White background
    'Position', [200, 100, sDim(3) - 400, sDim(4) - 200] ... % Resize to the height of the screen - 200
    );

% Extract data
c = [data.Concern]; % Find latency points
x = [data.Time]; % Extract x data

for L = 1:length(loggers)
    % Get data
    y = [data.(loggers{L})];
    
    % Setup axis
    ax{L} = subplot(...
        min(length(loggers), 3), ... % Determine number of rows (max 3)
        ceil(length(loggers)/3), ... % Determine number of columns
        L ... % Choose sub-plot to draw in
        ); 
    ax{L}.Position([1,3]) = [0.1, 0.8]; % Position plot
    ax{L}.XLabel.String = 'Time (s)'; % Label x-axis
    ax{L}.YLabel.String = loggers{L}; % Label y-axis
    set(ax{L}, ...
        'FontName', 'Verdana', ... % Change font
        'Color', [0.98, 0.98, 1], ... % Axis background
        'XGrid', 'on', ... % Add vertical gridlines
        'YGrid', 'on', ... % Add horizontal gridlines
        'GridColor', 'white', ... % Make gridlines white
        'GridAlpha', 1 ... % Make gridlines opaque
        );
    
    % Plot data
    ln{L} = line(ax{L}, ... % Plot data
        'XData', x, ... % X data is time
        'YData', y, ... % Y data is Edulogger values
        'Color', [42, 107, 211]./255, ... % Set colour to royal blue
        'LineWidth', 2 ... % Make lines 2 thick
        ); 
    co{L} = line(ax{L}, ... % Plot concern points
        repmat([data(c).Time], 2, 1), ... % X data is timestamps of latency points
        repmat(ax{L}.YLim', 1, sum(c)), ... % Y data is just axis limits
        'Color', 'r', ... % Set colour to red
        'LineStyle', ':' ... % Make lines dashed
        ); 
    
    ecol = autumn(length(evtype)); % Generate colour space for event lines
    ev = [];
    for E = 1:length(evtype) % For each kind of event...
        e = [data.(evtype{E})]; % Get indices at which this event happened
        ev{L, E} = line(... % Plot events
            repmat([data(e).Time], 2, 1), ... % X data is timestamps of events
            repmat(ax{L}.YLim', 1, sum(e)), ... % Y data is just axis limits
            'Color', ecol(E,:), ... % Set colour to black
            'LineWidth', 2 ... % Make lines 2 thick
        );
    end
    
    % Make sure users can only pan horizontally
    pan off
    pan xon
    % Make sure users can only zoom horizontally
    zoom off
    zoom xon
end

% Draw legend
lnLg = ln{1};

evLg = [];
if ~isempty(ev)
    evLg = [];
    for n = ev{end,:}
        evLg = [evLg, n(:)];
    end
end

if ~isempty(co{1})
    coLg = co{1};
else
    coLg = line(ax{L}, ... % Model concern point line
        [0 0], ... % X data is 0s
        ax{L}.YLim', ... % Y data is just axis limits
        'Color', 'r', ... % Set colour to red
        'LineStyle', ':' ... % Make lines dashed
        );
end

le = legend([lnLg coLg evLg], ["Data" "Concern" evtype]); % Create legend
     
le.Title.String = 'Legend'; % Set legend title
le.Position([1,3]) = [0.9, 0.1]; % Position legend
le.Box = 'off'; % Remove outline

