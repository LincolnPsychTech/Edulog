function data = elbeat(data)
% Identify beats from EKG data and calculate running average of BPM
%
% The input "data" is a structure generated by running an Edulogger experiment,
% consisting of the following fields:
% Time: The time (s) since the start of the experiment of each sample.
% (double)
% Concern: Whether or not each sample took more than twice the specified
% sample rate to retrieve (logical)
% EKG: Raw electrodermal data from a GSR edulogger (double)
% An additional field for each kind of Edulogger used, containing the
% measurements taken at each point in data.Time.
% 
% The output "data" is the same structure which was inputted, with two
% fields added: 
% BeatApex: Indicating whether or not the datapoint was the apex of a heartbeat (logical)
% BPM: A running average of beats per minute

if ~isfield(data, 'EKG') % If data does not have a column called "EKG"...
    error("Data does not contain EKG data") % Deliver an error
end

sps = elsps(data); % From data, estimate sps which was used
tonic = smooth([data.EKG], sps, 'moving'); % Use a moving smooth method with a span of 1 second to extract tonic signal
phasic = [data.EKG]' - tonic; % Subtract tonic signal from raw data to get phasic signal
beats = islocalmax(abs(phasic), 'FlatSelection', 'center', 'MinSeparation', round(sps/2)); % Identify apex point of each beat (local peaks within 0.5s range)
beatdiffs = diff([ 0 data(beats).Time ]); % Get matrix of time difference between each beat
bpm = 60./smooth(beatdiffs); % Smooth and convert to beats per minute

for n = 1:length(data) % For each data point...
    data(n).BeatApex = beats(n); % Store whether or not it was the apex point of a beat
    [~, i] = min(abs( n - find(beats) )); % Find index of closest peak
    data(n).BPM = bpm(i); % Store BPM for closest beat
end