def getval(port, *varargin):
    # Get individual value from specified Eduloggers
    # "port" is the port Eduloggers are connected to, this is visible on the
    # Neulog API window.
    # "loggers" is a one dimensional cell array, with each string specifying
    # the name of a different Edulogger as described in the Neulog API
    # literature:
    # https://neulog.com/wp-content/uploads/2014/06/NeuLog-API-version-7.pdf
    #
    # The output "data" is one row of a structure generated when running an 
    # Edulogger experiment, consisting of one field for each kind of Edulogger 
    # used, containing the measurements taken at each point in data.Time. 
    # Fieldnames should line up with the names specified in "loggers".
    
    import requests
    
    if isinstance(varargin[0], (tuple, list)):
        varargin = varargin[0] # Remove extraneous layers
    if not varargin:
        raise Exception("No valid eduloggers selected") # Throw an error if no loggers were supplied
    preface = 'http://localhost:' + str(port) + '/NeuLogAPI?'; # Construct the string to preface any argument passed to the Eduloggers
    val = {};
    for l in varargin: # For each logger...
        resp = requests.get(preface + 'GetSensorValue:[' + l + '],[1]'); # Send request for sensor value
        val[l] = float(''.join([x for x in resp.text if x in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', '-']])); # Extract numeric values
    return val

def run(port, dur, *varargin):
    # Run specified Eduloggers for a specified duration at optimal resolution.
    #
    # "port" is the port Eduloggers are connected to, this is visible on the
    # Neulog API window.
    # "dur" is the duration (s) of the clap test, it must be at least 15s for
    # any response to be visible.
    # "loggers" is a one dimensional cell array, with each string specifying
    # the name of a different Edulogger as described in the Neulog API
    # literature:
    # https://neulog.com/wp-content/uploads/2014/06/NeuLog-API-version-7.pdf
    #
    # The output "data" is a structure generated by running an Edulogger experiment,
    # consisting of the following fields:
    # Time: The time (s) since the start of the experiment of each sample.
    # (double)
    # Concern: Whether or not each sample took more than 0.4s  to retrieve (logical)
    # An additional field for each kind of Edulogger used, containing the
    # measurements taken at each point in data.Time. Fieldnames should line up
    # with the names specified in "loggers".
    
    import numpy
    import time

    # Get loggers
    eltypes = numpy.load('eltypes.npy'); # Load possible Edulogger types from file
    loggers = [x for x in varargin if any(x == eltypes)]; # Extract variable inputs matching valid types
    
    # Essential checks
    if not loggers: # If no valid loggers provided
        raise Exception("No valid eduloggers selected")
    
    #Run Edulogger
    data = list(); # Create output structure
    start = time.time(); # Start a timer
    while time.time() < start + dur: # Until the timer reaches sps^-1
        val = getval(port, loggers); # Get value(s) from Edulogger(s)
        val['Time'] = time.time() - start; # Record the time taken
        try:
            val['Concern'] = val['Time'] - data[-1]['Time'] > 0.4; # Did this timer stop at more than 0.4s after the last time?
        except:
            val['Concern'] = val['Time'] > 0.4; # If there is no last time, did it stop at more than 0.4s?
        data.append(val); # Assign measurement to overall data structure
    return data

def events(data, *varargin):
    # Apply event data to GSR data, add either a logical array or timestamps as
    # properly formatted events
    #
    # The input "data" is a structure generated by running an Edulogger experiment,
    # consisting of the following fields:
    # Time: The time (s) since the start of the experiment of each sample.
    # (double)
    # Concern: Whether or not each sample took more than twice the specified
    # sample rate to retrieve (logical)
    # An additional field for each kind of Edulogger used, containing the
    # measurements taken at each point in data.Time.
    # 
    # varargin should be string/object pairs, with the name of the event
    # followed by its data, e.g. elevents(data, 'Surprise', [10, 20, 30], 'relax', [5,
    # 15, 25])
    import numpy
    import math
    
    args = numpy.reshape(varargin, (2,math.floor(len(varargin)/2)) ); # Reshape input arguments into pairs
    for a in args: # For each argument pair
        for d in range(len(data)): # For each data point....
            if isinstance(a[1][d], bool): # If it is logical
                if len(a[1]) == len(data): # ...and the same length as the data
                    data[d][a[0]] = a[1][d];
                else:
                    raise Exception("Events must be either logical array of same length as data or numeric array of timestamps");
            elif isinstance(a[1][d], int):
                data[d][a[0]] = round(data[d]['Time']) in a[1];
            else:
                raise Exception("Events must be either logical array of same length as data or numeric array of timestamps");
            
    return data
            